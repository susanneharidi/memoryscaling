theme(legend.position = "bottom")+
theme(text = element_text(size = textsize, family = "sans"))
SimilarityRTExp1
SimilarityAccExp1 <- ggplot(dResponsesValidSimExp1, aes(x = W2VWordPairsSim, y = correct_01))+
geom_smooth(color = AccColor, method = "loess", span = 0.5, fill = AccColor)+
geom_smooth(color = "black", method = lm, se = FALSE, linetype = "dashed")+
labs(y = 'Mean accuracy +/- SE',
x = "Cue target similarity") +
theme(legend.position = "bottom")+
ylim(0,1)+
theme(text = element_text(size = textsize, family = "sans"))
SimilarityAccExp1
# RT
meanRTSetSizeExp1Block = ddply(dResponsesValidExp1, ~ ListLength + correct + Block,
summarise,
meanRT = mean(rt),
se = se(rt))
setSizeExp1Block <- ggplot(subset(meanRTSetSizeExp1Block, correct == TRUE),
aes(x = ListLength, y = meanRT))+
geom_line(aes(color = as.factor(Block)))+
geom_ribbon(aes(ymin = meanRT - se,
ymax = meanRT + se,
fill = as.factor(Block)), alpha = 0.2)+
geom_smooth(data = subset(dResponsesValidExp1, correct == TRUE),
aes(x = ListLength, y = rt, color = as.factor(Block)),
method = lm,
se = FALSE)+
labs(y = 'Mean RT in s +/- SE',
x = "Set size",
color = "Block",
fill = "Block") +
theme(legend.position = "bottom")+
theme(text = element_text(size = textsize, family = "sans"))
setSizeExp1Block
# Acc
meanAccSetSizeExp1Block = ddply(dResponsesValidExp1, ~ ListLength + Block,
summarise,
meanAcc = mean(correct_01),
se = se(correct_01))
setSizeExp1AccBlock <- ggplot(meanAccSetSizeExp1Block,
aes(x = ListLength, y = meanAcc))+
geom_line(aes(color = as.factor(Block)))+
geom_ribbon(aes(ymin = meanAcc - se,
ymax = meanAcc + se,
fill = as.factor(Block)), alpha = 0.2)+
geom_smooth(data = dResponsesValidExp1,
aes(x = ListLength, y = correct_01, color = as.factor(Block)),
method = lm,
se = FALSE)+
labs(y = 'Mean accuracy in s +/- SE',
x = "Set size",
color = "Block",
fill = "Block") +
theme(legend.position = "bottom")+
theme(text = element_text(size = textsize, family = "sans"))
setSizeExp1AccBlock
# RT
exp3NotControl = subset(dResponsesExp3, ContextSize != "None")
exp3NotControl$ContextSize = as.numeric(exp3NotControl$ContextSize)
meanRTContextSizeExp3 <- ddply(exp3NotControl,
~correct + ContextSize,
summarize, meanRT = mean(rt), se = se(rt))
meanRTContextSizeExp3Control <- ddply(subset(dResponsesExp3, ContextSize == "None"),
~correct + NoneListType,
summarise, meanRT = mean(rt), se = se(rt))
contextSizeExp3 <- ggplot(subset(meanRTContextSizeExp3, correct == TRUE), aes(x = ContextSize, y = meanRT))+
geom_line(color = RTColor)+
geom_ribbon(aes(ymin = meanRT - se,
ymax = meanRT + se), alpha = 0.2, fill = RTColor)+
geom_hline(data = subset(meanRTContextSizeExp3Control, correct == TRUE),
aes(yintercept = meanRT,
linetype = as.factor(NoneListType)),
color = RTColor, size = 2)+
geom_smooth(data = subset(exp3NotControl, correct == TRUE),
aes(x = ContextSize, y = rt),
color = "black",
method = lm,
linetype = "dashed",
se = FALSE)+
labs(y = 'Mean RT in s +/- SE',
x = "Context size",
linetype = "Control condition") +
theme(legend.position = "top")+
theme(text = element_text(size = textsize, family = "sans"))
contextSizeExp3
meanAccContextSizeExp3 <- ddply(exp3NotControl,
~ContextSize,
summarize, meanAcc = mean(correct_01), se = se(correct_01))
meanAccContextSizeExp3Control <- ddply(subset(dResponsesExp3, ContextSize == "None"),
~NoneListType,
summarise, meanAcc = mean(correct_01), se = se(correct_01))
contextSizeAccExp3 <- ggplot(meanAccContextSizeExp3, aes(x = ContextSize, y = meanAcc))+
geom_line(color = AccColor)+
geom_ribbon(aes(ymin = meanAcc - se,
ymax = meanAcc + se), alpha = 0.2, fill = AccColor)+
geom_hline(data = meanAccContextSizeExp3Control,
aes(yintercept = meanAcc,
linetype = as.factor(NoneListType)),color = AccColor,
size = 2)+
geom_smooth(data = exp3NotControl,
aes(x = ContextSize, y = correct_01),
color = "black",
method = lm,
linetype = "dashed",
se = FALSE)+
labs(y = 'Mean accuracy +/- SE',
x = "Context size",
linetype = "Control Condition") +
theme(legend.position = "bottom")+
theme(text = element_text(size = textsize, family = "sans"))
contextSizeAccExp3
RTSummaryExp1 <- ddply(dResponsesValidExp1,
~ListLength + correct,
summarise, meanRT = mean(rt), se = se(rt))
RTSummaryExp3 <- ddply(subset(dResponsesExp3, ContextSize != "None"),
~ContextSize + correct + ListLength,
summarise, meanRT = mean(rt), se = se(rt))
RTSummaryExp3$ContextSize = as.numeric(RTSummaryExp3$ContextSize)
RTSummaryExp1$ContextSize = RTSummaryExp1$ListLength
RTSummaryExp1$Experiment = "1"
RTSummaryExp3$Experiment = "3"
meanRTContextSizeExp3Control$Experiment = "3"
RTSummary = rbind(RTSummaryExp1, RTSummaryExp3)
setSizePlotCombi <- ggplot(data = RTSummary, aes(x = ContextSize, y = meanRT, color = Experiment))+
geom_line()+
geom_ribbon(data = RTSummary,
aes(ymin = meanRT - se,
ymax = meanRT + se,
color = Experiment), alpha = 0.2)+
labs(color = "Experiment",
linetype = "Control Condotion",
y = 'mean RT in s +/- SE',
x = "Set size/Context size") +
theme(legend.position = "bottom")+
theme(text = element_text(size = textsize, family = "sans"))+
geom_hline(data = meanRTContextSizeExp3Control,
aes(yintercept = meanRT,
linetype = as.factor(NoneListType),
color = Experiment))+
facet_grid(cols = vars(correct))
setSizePlotCombi
AccSummaryExp1 <- ddply(dResponsesValidExp1,
~ListLength,
summarise, meanAcc = mean(correct_01), se = se(correct_01))
AccSummaryExp3 <- ddply(subset(dResponsesExp3, ContextSize != "None"),
~ContextSize + ListLength,
summarise, meanAcc = mean(correct_01), se = se(correct_01))
AccSummaryExp3$ContextSize = as.numeric(AccSummaryExp3$ContextSize)
AccSummaryExp1$ContextSize = AccSummaryExp1$ListLength
AccSummaryExp1$Experiment = "1"
AccSummaryExp3$Experiment = "3"
meanAccContextSizeExp3Control$Experiment = "3"
AccSummary = rbind(AccSummaryExp1, AccSummaryExp3)
setSizePlotCombiAcc <- ggplot(data = AccSummary, aes(x = ContextSize, y = meanAcc, color = Experiment))+
geom_line()+
geom_ribbon(data = AccSummary,
aes(ymin = meanAcc - se,
ymax = meanAcc + se,
color = Experiment), alpha = 0.2)+
labs(color = "Experiment",
linetype = "Control Condotion",
y = 'mean Acc in s +/- SE',
x = "Set size/Context size") +
theme(legend.position = "bottom")+
geom_hline(data = meanAccContextSizeExp3Control,
aes(yintercept = meanAcc,
linetype = as.factor(NoneListType),
color = Experiment))+
theme(text = element_text(size = textsize, family = "sans"))
setSizePlotCombiAcc
# load packages --------------------------------------------------------------
library(tidyverse)
library(ggplot2)
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
library(dplyr)
library(plyr)
library(lme4)
library(brms)
install.packages("brms")
# load packages --------------------------------------------------------------
library(tidyverse)
library(ggplot2)
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
library(dplyr)
library(plyr)
library(lme4)
library(brms)
# standard error function
se <- function(x){sd(x)/sqrt(length(x))}
binary_se <- function(binary_array) {
if (!is.vector(binary_array)) {
stop("Input must be a vector")
}
if (!all(binary_array %in% c(0, 1))) {
stop("Input vector must contain only 0s and 1s")
}
n <- length(binary_array)
p <- mean(binary_array)
se <- sqrt(p * (1 - p) / n)
return(se)
}
seed = 2024
current_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
subdirectory = "/Experiment3"
setwd(paste(current_directory, subdirectory, sep = ""))
Data = read.csv("ExperimentDataExp3.csv")
# only get the response trials that are valid
dResponses <- subset(Data, Phase == "CuePresentation" & rt < 20 & validity == TRUE)
dResponsesLetters <- subset(Data, Phase == "LetterRecallResponse" & validity == TRUE)
dResponses <- dResponses %>%
mutate(RoughContextSize = case_when(
ContextSize == "None" & NoneListType == "highSimPairs" ~ "0_NoneHighSim",
ContextSize == "None" & NoneListType == "lowSimList" ~ "0_NoneLowSim",
as.numeric(ContextSize) < 5 ~ "1_small",
as.numeric(ContextSize) > 15 ~ "3_large",
TRUE ~ "2_medium"
))
# plot this as a boxplot
ggplot(subset(dResponses, correct == TRUE),
aes(x = RoughContextSize, y = rt, color = RoughContextSize))+
geom_boxplot()+
facet_grid(cols = vars(as.factor(ListLength)))
# BRMS Models: RT Context Size ------------------------------------------------
current_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
subdirectory = "/brmModels"
setwd(paste(current_directory, subdirectory, sep = ""))
correctResponses = subset(dResponses, correct == TRUE &
ContextSize != "None" &
validity_rt == TRUE)
correctResponses$ContextSize = as.numeric(correctResponses$ContextSize)
correctResponses$ContextSizeMCScaled <- scale(correctResponses$ContextSize, scale = TRUE)
RTModelContextSize <- brm(rt ~ ContextSizeMCScaled + (ContextSize|subject_id),
data = correctResponses,
iter = 10000,
cores = 4,
save_pars = save_pars(all = TRUE),
seed = seed,
control = list(max_treedepth = 15, adapt_delta = 0.99),
file = "exp3RTContextSizelogScaled",
family = lognormal()
)
# Model summary
summary(RTModelContextSize)
# Check for convergence
mcmc_plot(RTModelContextSize, type = "trace")
# Plot effects
mcmc_plot(RTModelContextSize, type = "intervals", prob = 0.95)
# only plot main populationlevel effects
mcmc_plot(RTModelContextSize, type = "areas", prob = 0.95, variable = "^b_", regex = TRUE)+
geom_vline(xintercept = 0, linetype = "longdash", color = "gray")+
xlab("RT in s")+
theme_minimal()+
theme(text = element_text(size = 20, family = "sans"))+
#scale_y_discrete(labels = c("Intercept", "Sequence Length", "Query Structure", "Sequence Structure", "Sort Task"))+#
ggtitle("Context Size RT analysis")
pp_check(RTModelContextSize, type = "ecdf_overlay")
pp_check(RTModelContextSize, type = "error_hist", ndraws = 11)
pp_check(RTModelContextSize, type = "scatter_avg", ndraws = 100)
#visualize all effects
plot(conditional_effects(RTModelContextSize), points = FALSE)
tab_model(RTModelContextSize, transform = NULL)
RTModelContextSizeRough <- brm(rt ~ RoughContextSize + (RoughContextSize|subject_id),
data = correctResponses,
iter = 10000,
cores = 4,
save_pars = save_pars(all = TRUE),
seed = seed,
control = list(max_treedepth = 15, adapt_delta = 0.99),
file = "exp3RTRoughContextSizeLog",
family = lognormal())
summary(RTModelContextSizeRough)
# Check for convergence
mcmc_plot(RTModelContextSizeRough, type = "trace")
# Plot effects
mcmc_plot(RTModelContextSizeRough, type = "intervals", prob = 0.95)
# only plot main populationlevel effects
mcmc_plot(RTModelContextSizeRough, type = "areas", prob = 0.95, variable = "^b_", regex = TRUE)+
geom_vline(xintercept = 0, linetype = "longdash", color = "gray")+
xlab("RT in s")+
theme_minimal()+
theme(text = element_text(size = 20, family = "sans"))+
#scale_y_discrete(labels = c("Intercept", "Sequence Length", "Query Structure", "Sequence Structure", "Sort Task"))+#
ggtitle("Rough Context Size RT Analysis")
pp_check(RTModelContextSizeRough, type = "ecdf_overlay")
pp_check(RTModelContextSizeRough, type = "error_hist", ndraws = 11)
# load packages --------------------------------------------------------------
library(tidyverse)
library(ggplot2)
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
library(dplyr)
library(plyr)
library(data.table)
library(gridExtra)
library(ggsignif)
library(lmerTest)
library(here)
library(jsonlite)
library(lme4)
library(readr)
library(ggthemes)
library(RWiener)
library(sys)
# standard error function
se <- function(x){sd(x)/sqrt(length(x))}
current_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
subdirectory = "/Experiment3"
setwd(paste(current_directory, subdirectory, sep = ""))
Data = read.csv("ExperimentDataExp3.csv")
dDataSoFar <- ddply(subset(Data,Phase == "CuePresentation"),
~subject_id + Cheated_pairs + NoneListType,
summarize, ListLength = mean(ListLength))
ggplot(dDataSoFar, aes(x = as.factor(NoneListType), fill = as.factor(Cheated_pairs)))+
geom_bar(position = position_dodge2(preserve = "single"))+
geom_hline(yintercept = 60, linetype = "dashed")+
labs(fill = "Cheated", x = "No Context Condition")
dDataSoFar <- ddply(subset(Data,Phase == "CuePresentation"),
~subject_id + validity + NoneListType,
summarize, ListLength = mean(ListLength))
textsize <- 28
color_mapping <- c("FALSE" = "red", "TRUE" = "forestgreen")
ggplot(dDataSoFar, aes(x = as.factor(NoneListType), fill = as.factor(validity)))+
geom_bar(position = position_dodge2(preserve = "single"))+
geom_hline(yintercept = 60, linetype = "dashed")+
theme(text = element_text(size = textsize, family = "sans"), legend.position = "bottom") +
scale_fill_manual(values = color_mapping)+
labs(fill = "Validity", x = "No Context Condition", y = "Participants")
# only get the response trials
dResponses <- subset(Data, Phase == "CuePresentation" & rt < 20 & validity == TRUE)
dResponsesLetters <- subset(Data, Phase == "LetterRecallResponse"  & validity == TRUE)
# Calculate mean values for each level of "correct" for the none condition
meanValues <- ddply(subset(dResponses, ContextSize == "None"),
~correct + NoneListType,
summarize, meanValue = mean(rt))
# and the other mean values
dResponsesValidMean <- ddply(subset(dResponses, ContextSize != "None"),
~NoneListType + ContextSize + correct,
summarise, meanRT = mean(rt), se = se(rt))
textsize <- 28
ContextSizePlot <- ggplot(subset(dResponses, ContextSize != "None"),
aes(x = as.numeric(ContextSize),
y = rt,
color = as.factor(NoneListType),
fill = as.factor(NoneListType))) +
geom_jitter(width = 0.1, height = 0.0, alpha = 0.5) +
geom_smooth(method = lm) +
labs(fill = "No Context Condition",
color = "No Context Condition",
y = 'RT in s',
x = "Context size") +
theme(legend.position = "bottom") +
theme(text = element_text(size = textsize, family = "sans")) +
geom_line(data = dResponsesValidMean,
aes(x = as.numeric(ContextSize),
y = meanRT,
color = as.factor(NoneListType)), alpha = 0.5)+
facet_grid(cols = vars(correct)) +
geom_hline(data = meanValues,
aes(yintercept = meanValue,
color = as.factor(NoneListType)),
linetype = "dashed")
ContextSizePlot
# Calculate mean values for each level of "correct"
meanValues1 <- ddply(subset(dResponses, ContextSize != "None"),
~correct+subject_id + NoneListType,
summarize, meanValue = mean(rt))
dResponsesValidMean1 <- ddply(subset(dResponses, ContextSize != "None"),
~subject_id + ContextSize + correct + NoneListType,
summarise, meanRT = mean(rt), se = se(rt))
ContextSizePlot1 <- ggplot(subset(dResponses, ContextSize != "None" & correct == TRUE),
aes(x = as.numeric(ContextSize),
y = rt,
color = as.factor(subject_id),
fill = as.factor(subject_id))) +
#geom_jitter(width = 0.1, height = 0.0, alpha = 0.5) +
geom_smooth(method = lm, se = FALSE) +
#ylim(0,20)+
labs(fill = "subject",
color = "subject",
x = "Context size",
y = 'RT in s') +
theme(legend.position = "none") +
theme(text = element_text(size = textsize, family = "sans")) +
geom_line(data = subset(dResponsesValidMean1, correct == TRUE),
aes(x = as.numeric(ContextSize),
y = meanRT,
color = as.factor(subject_id)),
alpha = 0.5)+
facet_grid(rows = vars(NoneListType)) +
geom_hline(data = subset(meanValues1, correct == TRUE),
aes(yintercept = meanValue,
color = as.factor(subject_id)),
linetype = "dashed")
ContextSizePlot1
dResponsesValidMean2 <- ddply(subset(dResponses, ContextSize != "None"),
~ ContextSize + correct,
summarise, meanRT = mean(rt), se = se(rt))
ContextSizePlot2 <- ggplot(subset(dResponses, ContextSize != "None"),
aes(x = as.numeric(ContextSize),
y = rt)) +
#geom_jitter(width = 0.1, height = 0.0, alpha = 0.5) +
geom_smooth(method = lm) +
labs(color = "No Context Condition",
x = "Context size",
y = 'RT in s') +
theme(legend.position = "bottom") +
theme(text = element_text(size = textsize, family = "sans")) +
geom_line(data = dResponsesValidMean2, aes(x = as.numeric(ContextSize),
y = meanRT),
alpha = 0.5)+
facet_grid(cols = vars(correct)) +
geom_hline(data = meanValues, aes(yintercept = meanValue, color = as.factor(NoneListType)),
linetype = "dashed")
ContextSizePlot2
dAccuracy <- ddply(dResponses,
~ContextSize + subject_id + NoneListType,
summarize, accuracy = mean(correct_01))
dAccuracyMean <- ddply(dResponses,
~ContextSize + NoneListType,
summarize, accuracy = mean(correct_01))
dAccuracyLetters <- ddply(dResponsesLetters,
~SequenceLength + subject_id,
summarize, accuracy = mean(correct_01))
dAccuracyLettersTotal <- ddply(dResponsesLetters,
~subject_id,
summarize, letter_accuracy = mean(correct_01))
dAccuracyTotal <- ddply(dResponses,
~subject_id,
summarize, word_pair_accuracy = mean(correct_01))
dAccuracyBoth <- merge(dAccuracyTotal, dAccuracyLettersTotal, by = c("subject_id"))
ggplot(dAccuracyBoth, aes(x = letter_accuracy, y = word_pair_accuracy))+
geom_point()+
geom_smooth()
ggplot(dAccuracy, aes(y = accuracy, x = subject_id, fill = as.factor(ContextSize), color = as.factor(ContextSize)))+
geom_jitter(alpha = 0.5, width = 0.2, height = 0)+
ylim(0,1)
dAccuracyMean2 <- ddply(dResponses, ~ContextSize + subject_id, summarize, accuracy = mean(correct_01))
ggplot(subset(dAccuracy, ContextSize != "None"), aes(x = as.numeric(ContextSize), y = accuracy, color = as.factor(subject_id)))+
geom_jitter(width = 0.2, height = 0, size = 2)+
geom_smooth(method = lm, se = FALSE)+
theme(legend.position = "none")+
geom_hline(data = subset(dAccuracyMean2, ContextSize == "None"), aes(yintercept = accuracy, color = as.factor(subject_id)), linetype = "dotdash")+
geom_line(data = subset(dAccuracyMean2, ContextSize != "None"), aes(x = as.numeric(ContextSize), y = accuracy, color = as.factor(subject_id)), linetype = "dashed")+
ylim(0,1)
dAccuracy2 <- ddply(dResponses, ~subject_id+NoneListType, summarize, accuracy = mean(correct_01))
ggplot(dAccuracy2, aes(x = accuracy, fill = as.factor(NoneListType)))+
geom_histogram(position = "identity", alpha = 0.4) +
geom_density(alpha = 0.3)+
xlim(0,1)+
geom_vline(aes(xintercept = mean(accuracy)),
color="blue", linetype="dashed", size=1)
dAccuracy3 <- ddply(subset(Data, Phase == "CuePresentation"),
~subject_id + NoneListType + validity,
summarize, accuracy = mean(correct_01))
ggplot(dAccuracy3, aes(x = accuracy, fill = validity))+
geom_histogram(position = "identity", alpha = 0.4) +
geom_density(alpha = 0.3)+
xlim(0,1)+
facet_grid(rows = vars(NoneListType))
dListLengths <- ddply(dResponses, ~subject_id + ContextSize + NoneListType, summarize, accuracy = mean(correct_01))
ggplot(subset(dListLengths, ContextSize != "None"), aes(x = as.numeric(ContextSize), fill = as.factor(NoneListType))) +
geom_histogram(binwidth = 1.1, alpha = 0.5, position = "identity") +
labs(title = "Histogram of Context Size",
x = "Context Size",
y = "Frequency")
# plot accuracy per block for each subject
dAccuracyBlock <- ddply(dResponses, ~subject_id+Block+NoneListType, summarize, accuracy = mean(correct_01), rt = mean(rt))
ggplot(dAccuracyBlock, aes(y = accuracy, x = Block, color = as.factor(NoneListType)))+
geom_smooth()+
ylim(0,1)+
theme(legend.position = "none")
# effect of context size on accuracy
dAccuracyContextSize <- ddply(subset(dResponses, ContextSize != "None"),
~ContextSize+NoneListType+subject_id,
summarize, accuracy = mean(correct_01))
meanValuesAcc <- ddply(subset(dResponses, ContextSize == "None"),
~NoneListType,
summarize, accuracy = mean(correct_01))
# and the other mean values
dAccValidMean <- ddply(subset(dResponses, ContextSize != "None"),
~NoneListType + ContextSize,
summarise, accuracy = mean(correct_01), se = se(correct_01))
textsize = 24
AccContextSizePlot <- ggplot(dAccuracyContextSize, aes(x = as.numeric(ContextSize), y = accuracy, color = as.factor(NoneListType)))+
#geom_violin(trim=FALSE, alpha = 0.3)+
#geom_point()+
geom_smooth(method = lm)+
ylim(0,1)+
#add xlab
xlab("contextSize")+ # (number of word pairs)
#add ylab
ylab('accuracy')+
labs(x = "Context Size", color = "No Context Condition", y = "Accuracy")+
geom_line(data = dAccValidMean,
aes(x = as.numeric(ContextSize),
y = accuracy,
color = as.factor(NoneListType)), alpha = 0.5)+
geom_hline(data = meanValuesAcc,
aes(yintercept = accuracy,
color = as.factor(NoneListType)),
linetype = "dashed")+
theme(legend.position = "bottom")+
theme(text = element_text(size = textsize, family = "sans"))
AccContextSizePlot
