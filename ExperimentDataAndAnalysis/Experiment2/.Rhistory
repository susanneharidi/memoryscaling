install.packages("remotes")
# install.packages("remotes")
remotes::install_github("coatless-mac/macrtools")
macrtools::macos_rtools_install()
macrtools::is_xcode_cli_installed()
macrtools::is_gfortran_installed()
macrtools::is_gfortran_installed()
macrtools::xcode_cli_install()
macrtools::gfortran_install()
macrtools::recipes_binary_install('r-base-dev')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
arch <- ifelse(R.version$arch == "aarch64", "arm64", "x86_64")
cat(paste("\nCXX14FLAGS += -O3 -mtune=native -arch", arch, "-ftemplate-depth-256"),
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
install.packages("brms")
library(brms)
library("brms")
install.packages("brms")
library(brms)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan")
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("brms")
install.packages("shinystan")
install.packages("igraph")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
5+5
library(brms)
# load packages --------------------------------------------------------------
library(tidyverse)
library(ggplot2)
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
library(dplyr)
library(plyr)
library(lme4)
# SET WD:
# If you are not using the here package and R projects, this is the place to
# set the working directory to the inside of the github project
# Fuctions --------------------------------------------------------------------
# standard error function
se <- function(x){sd(x)/sqrt(length(x))}
binary_se <- function(binary_array) {
if (!is.vector(binary_array)) {
stop("Input must be a vector")
}
if (!all(binary_array %in% c(0, 1))) {
stop("Input vector must contain only 0s and 1s")
}
n <- length(binary_array)
p <- mean(binary_array)
se <- sqrt(p * (1 - p) / n)
return(se)
}
# load all data from experiment2 ----------------------------------------------
current_directory <- dirname(rstudioapi::getSourceEditorContext()$path)
subdirectory = "/Experiment2"
setwd(paste(current_directory, subdirectory, sep = ""))
Data = read.csv("ExperimentDataExp2.csv")
# only get the response trials
dResponses <- subset(Data, Phase == "CuePresentation" & rt < 20 & validity == TRUE)
dResponsesLetters <- subset(Data, Phase == "LetterRecallResponse" & validity == TRUE)
dResponses <- dResponses %>%
mutate(RoughContextSize = case_when(
ContextSize == "None" ~ "0_None",
as.numeric(ContextSize) <= 5 ~ "1_small",
ListLength == 15 & as.numeric(ContextSize) >= 10 ~ "3_large",
ListLength == 30 & as.numeric(ContextSize) >= 25 ~ "3_large",
TRUE ~ "2_medium"
))
# plot this as a boxplot
ggplot(subset(dResponses, correct == TRUE),
aes(x = RoughContextSize, y = rt, color = RoughContextSize))+
geom_boxplot()+
facet_grid(cols = vars(as.factor(ListLength)))
# Linear Regression -----------------------------------------------------------
correctdResponses = subset(dResponses, correct == TRUE)
ModelRTContextSize <- lmer(rt ~ ContextSize + ListLength + (1|subject_id),
data = correctdResponses)
summary(ModelRTContextSize)
ModelRTContextSize_2 <- lmer(rt ~ RoughContextSize + ListLength + (1|subject_id),
data = correctdResponses)
summary(ModelRTContextSize_2)
ModelRTContextSize_Interact <- lmer(rt ~ RoughContextSize * ListLength + (1|subject_id),
data = correctdResponses)
# make seperate models for different list Lengths
ModelRTContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (RoughContextSize|subject_id),
data = subset(dResponses, ListLength == 15),
family = binomial)
summary(ModelRTContextSize_accuracy15)
slope_incorrect <- coef(ModelRTContextSize_accuracy15)["RoughContextSize1_small"]
slope_incorrect
coef(ModelRTContextSize_accuracy15)
ModelRTContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subset(subject_data, ListLength == 15),
family = binomial)
# make seperate models for different list Lengths
ModelRTContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subset(dResponses, ListLength == 15),
family = binomial)
coef(ModelRTContextSize_accuracy15)
coef(ModelRTContextSize_accuracy15)["RoughContextSize1_small"]
coef(ModelRTContextSize_accuracy15)$zvb763507b2sh8c
subject_data <- subset(dResponses, subject_id == unique(dResponses$subject_id)[1])
ModelRTContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize,
data = subset(subject_data, ListLength == 15),
family = binomial)
ModelRTContextSize_accuracy15 <- lm(correct_01 ~ RoughContextSize,
data = subset(subject_data, ListLength == 15),
family = binomial)
ModelRTContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize,
data = subset(subject_data, ListLength == 15),
family = binomial)
coef(ModelRTContextSize_accuracy15)["RoughContextSize1_small"]
summary(ModelRTContextSize_accuracy15)
subset(dResponsesLetters, subject_id == subject)
subject = unique(dResponses$subject_id)[1]
subset(dResponsesLetters, subject_id == subject)
subset(dResponsesLetters, subject_id == subject)$correct_01
mean(subset(dResponsesLetters, subject_id == subject)$correct_01)
AllEffectSmallVsNone = c()
AllAccuracydigitSpan = c()
for (subject in unique(dResponses$subject_id)) {
subject_data <- subset(dResponses, subject_id == subject)
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize,
data = subset(subject_data, ListLength == 15),
family = binomial)
effectSmallVsNone = coef(ModelRTIndContextSize_accuracy15)["RoughContextSize1_small"]
accuracydigitSpan = mean(subset(dResponsesLetters, subject_id == subject)$correct_01)
AllEffectSmallVsNone = c(AllEffectSmallVsNone, effectSmallVsNone)
AllAccuracydigitSpan = c(AllAccuracydigitSpan, accuracydigitSpan)
}
dfAccuracyEffectDigitSpan
for (subject in unique(dResponses$subject_id)) {
subject_data <- subset(dResponses, subject_id == subject)
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize,
data = subset(subject_data, ListLength == 15),
family = binomial)
effectSmallVsNone = coef(ModelRTIndContextSize_accuracy15)["RoughContextSize1_small"]
accuracydigitSpan = mean(subset(dResponsesLetters, subject_id == subject)$correct_01)
AllEffectSmallVsNone = c(AllEffectSmallVsNone, effectSmallVsNone)
AllAccuracydigitSpan = c(AllAccuracydigitSpan, accuracydigitSpan)
}
ModelRTIndContextSize_accuracy15
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subset(subject_data, ListLength == 15),
family = binomial)
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subset(subject_data, ListLength == 15),
family = binomial)
for (subject in unique(dResponses$subject_id)) {
subject_data <- subset(dResponses, subject_id == subject)
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subset(subject_data, ListLength == 15),
family = binomial)
effectSmallVsNone = coef(ModelRTIndContextSize_accuracy15)["RoughContextSize1_small"]
accuracydigitSpan = mean(subset(dResponsesLetters, subject_id == subject)$correct_01)
AllEffectSmallVsNone = c(AllEffectSmallVsNone, effectSmallVsNone)
AllAccuracydigitSpan = c(AllAccuracydigitSpan, accuracydigitSpan)
}
AllEffectSmallVsNone = c()
AllAccuracydigitSpan = c()
for (subject in unique(dResponses$subject_id)) {
subject_data <- subset(dResponses, subject_id == subject)
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subset(subject_data, ListLength == 15),
family = binomial)
effectSmallVsNone = coef(ModelRTIndContextSize_accuracy15)["RoughContextSize1_small"]
accuracydigitSpan = mean(subset(dResponsesLetters, subject_id == subject)$correct_01)
AllEffectSmallVsNone = c(AllEffectSmallVsNone, effectSmallVsNone)
AllAccuracydigitSpan = c(AllAccuracydigitSpan, accuracydigitSpan)
}
ModelRTIndContextSize_accuracy15
subset(subject_data, ListLength == 15)
AllEffectSmallVsNone = c()
AllAccuracydigitSpan = c()
for (subject in unique(subset(dResponses$subject_id, ListLength == 15))) {
subject_data <- subset(dResponses, subject_id == subject)
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subset(subject_data, ListLength == 15),
family = binomial)
effectSmallVsNone = coef(ModelRTIndContextSize_accuracy15)["RoughContextSize1_small"]
accuracydigitSpan = mean(subset(dResponsesLetters, subject_id == subject)$correct_01)
AllEffectSmallVsNone = c(AllEffectSmallVsNone, effectSmallVsNone)
AllAccuracydigitSpan = c(AllAccuracydigitSpan, accuracydigitSpan)
}
for (subject in unique(subset(dResponses$subject_id, ListLength == 15))) {
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subset(subject_data,
family = binomial)
effectSmallVsNone = coef(ModelRTIndContextSize_accuracy15)["RoughContextSize1_small"]
AllEffectSmallVsNone = c()
AllAccuracydigitSpan = c()
for (subject in unique(subset(dResponses$subject_id, ListLength == 15))) {
subject_data <- subset(dResponses, subject_id == subject)
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subject_data,
family = binomial)
effectSmallVsNone = coef(ModelRTIndContextSize_accuracy15)["RoughContextSize1_small"]
accuracydigitSpan = mean(subset(dResponsesLetters, subject_id == subject)$correct_01)
AllEffectSmallVsNone = c(AllEffectSmallVsNone, effectSmallVsNone)
AllAccuracydigitSpan = c(AllAccuracydigitSpan, accuracydigitSpan)
}
AllEffectSmallVsNone = c()
AllAccuracydigitSpan = c()
for (subject in unique(subset(dResponses, ListLength == 15)$subject_id)) {
subject_data <- subset(dResponses, subject_id == subject)
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subject_data,
family = binomial)
effectSmallVsNone = coef(ModelRTIndContextSize_accuracy15)["RoughContextSize1_small"]
accuracydigitSpan = mean(subset(dResponsesLetters, subject_id == subject)$correct_01)
AllEffectSmallVsNone = c(AllEffectSmallVsNone, effectSmallVsNone)
AllAccuracydigitSpan = c(AllAccuracydigitSpan, accuracydigitSpan)
}
subject_data
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subject_data,
family = binomial)
ranef(ModelRTContextSize_accuracy15)$Subject
ranef(ModelRTContextSize_accuracy15)$subject_id
coef(ModelRTContextSize_accuracy15)$subject_id
# make seperate models for different list Lengths
ModelRTContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (1|subject_id),
data = subset(dResponses, ListLength == 15),
family = binomial)
ranef(ModelRTContextSize_accuracy15)$subject_id
ModelRTContextSize_accuracy30 <- glmer(correct_01 ~ RoughContextSize + (RoughContextSize|subject_id),
data = subset(dResponses, ListLength == 30),
family = binomial)
ranef(ModelRTContextSize_accuracy15)$subject_id
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (RoughContextSize|subject_id),
data = subset(dResponses, ListLength == 15),
family = binomial)
ranef(ModelRTIndContextSize_accuracy15)$subject_id
a =ranef(ModelRTIndContextSize_accuracy15)$subject_id
View(a)
a = data.frame((a))
a
a = data.frame(a)
a
a =ranef(ModelRTIndContextSize_accuracy15)$subject_id
unique(subset(dResponses, ListLength == 15)$subject_id)
accuracydigitSpan = ddply(subset(dResponsesLetters, ListLength == 15))
ranef(ModelRTIndContextSize_accuracy15)$subject_id
RandomEffects = ranef(ModelRTIndContextSize_accuracy15)$subject_id
RandomEffects$RoughContextSize1_small
RandomEffects$RoughContextSize1_small[1]
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (RoughContextSize|subject_id),
data = subset(dResponses, ListLength == 15),
family = binomial)
RandomEffects = ranef(ModelRTIndContextSize_accuracy15)$subject_id
AllEffectSmallVsNone = RandomEffects$RoughContextSize1_small
AllAccuracydigitSpan = c()
for (subject in unique(subset(dResponses, ListLength == 15)$subject_id)) {
accuracydigitSpan = mean(subset(dResponsesLetters, subject_id == subject)$correct_01)
AllAccuracydigitSpan = c(AllAccuracydigitSpan, accuracydigitSpan)
}
RandomEffects$RoughContextSize1_small
dfAccuracyEffectDigitSpan <- data.frame(
subjetc = unique(subset(dResponses, ListLength == 15)$subject_id),
DigitSpanAcc = AllAccuracydigitSpan,
EffectSmallvsNone = AllEffectSmallVsNone
)
ggplot(dfAccuracyEffectDigitSpan, aes(x = DigitSpanAcc, y = EffectSmallvsNone))+
geom_point()
ggplot(dfAccuracyEffectDigitSpan, aes(x = DigitSpanAcc, y = EffectSmallvsNone))+
geom_point()+
geom_smooth(method = lm)
Correlation = cor(AllAccuracydigitSpan, AllEffectSmallVsNone)
Correlation
ModelRTIndContextSize_accuracy15 <- glmer(correct_01 ~ RoughContextSize + (RoughContextSize|subject_id),
data = subset(dResponses, ListLength == 15),
family = binomial)
source("~/Desktop/Git_repos/GitLab/memoryscaling/DataFromOnlineExperiment/Exp_2_analyses.R", echo=TRUE)
# Warning message:
#   In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
#                  Model failed to converge with max|grad| = 0.0105071 (tol = 0.002, component 1)
summary(ModelRTIndContextSize_accuracy15)
ggplot(dfAccuracyEffectDigitSpan, aes(x = DigitSpanAcc, y = EffectSmallvsNone))+
geom_point()+
geom_smooth(method = lm)
